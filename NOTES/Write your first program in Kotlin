<!-- 1 -Modify your program -->

Change the Hello World code
Let's change the program to make it do something a little different.

    1 -Change the "Hello, world!" text to say    ("Happy Birthday!").
    2 -Run your program by clicking the blue or green run button at the top right.
    3 -At the bottom, you should now see Happy Birthday! printed, as shown below.

<!-- How does it work? -->
How is this done? This seems like a lot of code to just print something!

Well, if you wanted a friend to write "Hello, world!" on a piece of paper, there is a lot of implied information. If you just tell them, "Write â€˜Hello world!' on this piece of paper", they are going to make assumptions about the information you left out. For example, they are going to assume they need to use a pen, and that you want them to write it using letters! The computer does not make these assumptions, so you have to give precise instructions that include every step.

Just like the English language has structure, so does a programming language. If you've ever learned another language, you know the challenge of learning the grammar, the spelling, perhaps a new alphabet of symbols, and the vocabulary. Learning to program has similar challenges, but fortunately, it is less complex and a lot more logical than learning, for example English.

<!-- Understand the parts of the program -->
Now, take a look at the code. Each piece of this program serves a specific purpose, and you need all the pieces in order to be able to run the program. Let's start with the first word.

(fun) -named as function for this program.

(fun) is a word in the Kotlin programming language. (fun) stands for function. A function is a section of a program that performs a specific task.

<Note: Kotlin has many special words with very specific meanings. As you learn to program in the Kotlin language, you will learn these words. They are often called keywords or reserved words.  -->

<fun main -->

(main) is the name of this function. Functions have names, so they can be distinguished from each other. This function is called (main), because it is the first, or main, function that is called when you run the program. Every Kotlin program needs a function named (main).

<fun main() -->

The function name is always followed by [()] two parentheses.
Inside the parentheses, you can put information for the function to use. This input to the function is called "arguments" or [args] for short. You will learn more about arguments later.

<fun main() {}-->

Notice the pair of curly braces {} after the parentheses. Inside a function is code that accomplishes a task. These curly braces surround those lines of code.
Look at the line of code between the curly braces:

<println("Happy Birthday!" ) -->

<!-- This line of code prints the (Happy Birthday!) text.  -->

    -(println) tells the system to print a line of text.
    -Inside the parentheses you put the text to be printed.
    -Notice that the text to be printed is    surrounded by quotes. This tells the system  that everything inside the quotation marks  should be printed exactly as given.
To actually print the text, this whole println instruction has to be inside the (main) function.

<!-- So, there it is. The smallest Kotlin program. -->

<fun main() {println(
    "Happy Birthday!") 
}                      >

<!-- If you Want to Extend this you can do it by adding mor println in this code like the below example -->

<fun main() {
    println("Happy Birthday!")
    println("Jhansi")
    println("You are 25!")
}                     >

<!-- 6. Summary -->
   
    1 -https://developer.android.com/training/kotlinplayground is an interactive code editor on the web where you can practice writing Kotlin programs.
    
    2 -All Kotlin programs need to have a main() function: fun main() {}
    
    3 -Use the println() function to print a line of text.
    
    4 -Place text you want to print between double quotes. For example "Hello".
    
    5 -Repeat the println() instruction to print multiple lines of text.
    
    6 -Errors are marked red in the program. There is an error message in the output pane to help you figure out where the error is and what might be causing it.

<!-- 7. Learn more -->
    
    https://developer.android.com/training/kotlinplayground
    Vocabulary for Android Basics in Kotlin 
    <href="https://developer.android.com/courses/android-basics-kotlin/android-basics-kotlin-vocab">

<!-- 8. Practice on your own -->

<Note: Practice problems are optional. They provide an opportunity for you to practice what you've learned in this codelab. >

Do the following:

Change the [println()] instructions to [print()].
Run your program. What happens?
Hint: The [print()] instruction just prints the text without adding a line break at the end of each string.

Fix the text so that each part of the message is on its own line.
Hint: Use [\n] inside the text to add a line break. For example, {"line \n break" }. Adding a line break changes the output as shown below.

Hint: You can print an empty line by supplying no text: [println("")].

Code:


fun main() {
    println("no line break")
    println("")
    println("with line \n break")
}
Output:


no line break

with line 
 break

Check your work:

Here is one possible solution:


fun main() {
    print("Happy Birthday!\n")
    print("Jhansi\n")
    print("You are 25!")
}