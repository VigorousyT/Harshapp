<!-- 1. Introduction -->
In this codelab you will create a short Kotlin program that prints a birthday message with a cake and a birthday banner.

<!--Prerequisites -->

1 -How to open and edit code in https://developer.android.com/training/kotlinplayground, a browser-based Kotlin programming tool.
2 -Understand the "Hello world!" program from the Write your first Kotlin program codelab.
3 -How to use println() to write text to the console of the online Kotlin code editor.
<!-- What you will learn -->

1 -How to print more complex text from your program.
2 -How to do basic math in Kotlin and store the results in variables for later use.
3 -How to create a function to print the same string several times.
4 -How to create a loop that prints a text snippet multiple times.
<!-- What you will build -->

1 -You will create a short program that you can use to print birthday messages, a text-based picture of a cake, and a banner.
<!-- What you need -->

1 -A computer with internet access and a modern web browser, such as the latest version of Chrome.

<!---------------------------------------------------------------------->

<!-- 2. Create a birthday message in Kotlin -->
Set up your starter code

1 -In your browser, open https://developer.android.com/training/kotlinplayground. This opens a browser-based Kotlin programming tool.
2 -Inside the fun main() function, replace the "Hello, world!" text with "Happy Birthday, Rover!".
3 -Below that, still inside the curly braces, add two more lines to print: "You are already 5!" and "5 is the very best age to celebrate!".
 
 Your finished code should look like this.

<fun main() { 
    println("Happy Birthday, Rover!")
    println("You are already 5!")
    println("5 is the very best age to celebrate!")
}-->

4 -Run your code.
5 -Verify that the output pane shows Happy Birthday, Rover! and below that, You are already 5! and 5 is the very best age to celebrate!

<!-- Happy Birthday, Rover!
You are already 5!
5 is the very best age to celebrate!-->

<!-- Add a birthday cake -->
   A birthday message needs a birthday-themed picture. Like, a cake. You can add a cake to your birthday message by printing additional lines that use the letters and symbols on your keyboards and println().

   Continue from the solution code above.

   1 -In your code, between the two println() statements for Happy Birthday and You are already 5, add the following lines of print statements, as shown below. This creates a cake. The last println() statement has no text between the quotes, which prints an empty line.

    println("   ,,,,,   ")
    println("   |||||   ")
    println(" =========")
    println("@@@@@@@@@@@")
    println("{~@~@~@~@~}")
    println("@@@@@@@@@@@")
    println("") 


   To help others understand your code, you can add a comment before you print the cake. If you run your code, the output won't look any different, because comments are just information for you and other developers, not commands for the system. An inline comment starts with // followed by text, as shown below.


   // This is a comment line
   // This is another comment

2 -Add a comment before you print the cake: // Let's print a cake!.

3 -Add a comment before printing the empty line: // This prints an empty line.

<!-- Your code should look like the code below. -->


<fun main() {
    println("Happy Birthday, Rover!")
    
    // Let's print a cake!
    println("   ,,,,,   ")
    println("   |||||   ")
    println(" =========")
    println("@@@@@@@@@@@")
    println("{~@~@~@~@~}")
    println("@@@@@@@@@@@")
    
    // This prints an empty line.
    println("")

    println("You are already 5!")
    println("5 is the very best age to celebrate!")
} -->


 <Tip: Notice that we added some whitespace (blank lines) in the code to separate the sections of the code. This makes the code more readable. You can add empty lines anywhere you find it helpful. -->

<!-- Run your code, and the output should look like below. -->

<Happy Birthday, Rover!
   ,,,,,   
   |||||   
 =========
@@@@@@@@@@@
{~@~@~@~@~}
@@@@@@@@@@@

You are already 5!
5 is the very best age to celebrate! -->

<!---------------------------------------------------------------------->


<!-- 3. Create and use variables -->
Store Rover's age in a variable
 1 -In your finished code so far, notice how you are repeating the same age number twice.
Instead of repeating this number, you could store it in one place, as a variable. It's like putting your number into a box and giving it a name. Then you can use this variable name any time you need the value. And, if the age changes, you only have to change your program in one place. By changing the variable, the correct value for the age is printed everywhere the variable is used.

 2 -In your program, as the first line of code inside the main() function, add the following code to create a variable called age, with a value of 5, as shown below. (You must put this line before the println() statements).

val age = 5

This line means:

   1 -[val] is a special word used by Kotlin, called a keyword, indicating that what follows is the name of a variable.
   2 -[age] is the name of the variable.
   3 -[=] makes the value of [age] (on its left) be the same as the value on its right. In math, a single equal sign is used to assert that the values on each side are the same. In Kotlin, unlike in math, a single equal sign is used to assign the value on the right to the named variable on the left.

A developer would say it like this: This line declares a variable named [age] whose assigned value is [5].

 <Important: A variable declared using the val keyword can only be set once. You cannot change its value later in the program. 
 You can declare a changeable variable with the var keyword, which you will do in a later codelab. >

To use a variable inside a print statement, you need to surround it with some symbols that tell the system that what comes next is not text, but a variable. Instead of printing text, the system needs to print the value of the variable. You do this by putting your variable inside curly braces preceded by a dollar sign, like in the example below.


[${variable}]
  1 -In your code, replace the number 5 in both print statements with the age variable as shown below.

<println("You are already ${age}!") 
println("${age} is the very best age to celebrate!")>

  2 -Run your code, and both messages should show the same age.
  3 -Change the value of the variable to something different. For example, you could show Rover's age in days instead of years. To do this, multiply the age with 365, omitting leap years. You can do this calculation right when you create the variable, as shown below.

<val age = 5 * 365>

4 -Run your code again, and notice that both messages now show the age in days.

<Happy Birthday, Rover! 
   ,,,,,   
   |||||   
 =========
@@@@@@@@@@@
{~@~@~@~@~}
@@@@@@@@@@@

You are already 1825!
1825 is the very best age to celebrate!>

 5 -[Optional] Change the text of the print messages to work better with days. For example, change them to read:

You are already 1825 days old!
1825 days old is the very best age to celebrate!

<!-- Put text into a variable -->
You can not only put numbers into variables, but also text.

 1.Below the variable for [age], add a variable called name for the name of the birthday person and set its value to ["Rover"].

<val name = "Rover >
 
 2.Replace the name Rover in the birthday message with the variable, as shown below

<println("Happy Birthday, ${name}!")>
And you can have more than one variable in a print statement.

 3.Add Rover to the age message, using the name variable, as shown below.

<println("You are already ${age} days old, ${name}!")>

Your completed code should look similar to this.


<fun main() {
    val age = 5 * 365
    val name = "Rover"
    println("Happy Birthday, ${name}!")
    // Let's print a cake!
    println("   ,,,,,   ")
    println("   |||||   ")
    println(" =========")
    println("@@@@@@@@@@@")
    println("{~@~@~@~@~}")
    println("@@@@@@@@@@@")
    // This prints an empty line.
    println("")
    println("You are already ${age} days old, ${name}!")
    println("${age} days old is the very best age to celebrate!")
}>

Congratulations! You can now create messages with text, graphics created from symbols, use variables to store numbers and text, and print text using variables. -->


<!---------------------------------------------------------------------->

<!-- You can also cheak this link --> :- https://developer.android.com/codelabs/basic-android-kotlin-training-kotlin-birthday-message?continue=https%3A%2F%2Fdeveloper.android.com%2Fcourses%2Fpathways%2Fandroid-basics-kotlin-one%23codelab-https%3A%2F%2Fdeveloper.android.com%2Fcodelabs%2Fbasic-android-kotlin-training-kotlin-birthday-message#4    

For topic 4, 5, 6, 7, 8, 9 go to this link.

/\/\\/\/\/\/\/\\/\/\/\/\\/\/\\/\/\/\\\/\/\/\\/\/\///\\/\/\/\/\/\\/\/\/\/\\/

this is your code after creating the birthday template.
<fun main() {
    val border = "`-._,-'"
    val timesToRepeat = 4
    printBorder(border, timesToRepeat)
    println("  Happy Birthday, Jhansi!")
    printBorder(border, timesToRepeat)
}
fun printBorder(border: String, timesToRepeat: Int) {
    repeat(timesToRepeat) {
        print(border)
    }
    println()
}                                          >

